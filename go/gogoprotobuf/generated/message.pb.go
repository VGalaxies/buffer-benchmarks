// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package generated

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageType int32

const (
	MessageType_DefaultMessageType        MessageType = 0
	MessageType_CastAdd                   MessageType = 1
	MessageType_CastRemove                MessageType = 2
	MessageType_ReactionAdd               MessageType = 3
	MessageType_ReactionRemove            MessageType = 4
	MessageType_AmpAdd                    MessageType = 5
	MessageType_AmpRemove                 MessageType = 6
	MessageType_VerificationAddEthAddress MessageType = 7
	MessageType_VerificationRemove        MessageType = 8
	MessageType_SignerAdd                 MessageType = 9
	MessageType_SignerRemove              MessageType = 10
	MessageType_UserDataAdd               MessageType = 11
)

var MessageType_name = map[int32]string{
	0:  "DefaultMessageType",
	1:  "CastAdd",
	2:  "CastRemove",
	3:  "ReactionAdd",
	4:  "ReactionRemove",
	5:  "AmpAdd",
	6:  "AmpRemove",
	7:  "VerificationAddEthAddress",
	8:  "VerificationRemove",
	9:  "SignerAdd",
	10: "SignerRemove",
	11: "UserDataAdd",
}

var MessageType_value = map[string]int32{
	"DefaultMessageType":        0,
	"CastAdd":                   1,
	"CastRemove":                2,
	"ReactionAdd":               3,
	"ReactionRemove":            4,
	"AmpAdd":                    5,
	"AmpRemove":                 6,
	"VerificationAddEthAddress": 7,
	"VerificationRemove":        8,
	"SignerAdd":                 9,
	"SignerRemove":              10,
	"UserDataAdd":               11,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

type SignatureScheme int32

const (
	SignatureScheme_DefaultSignatureScheme SignatureScheme = 0
	SignatureScheme_Ed25519                SignatureScheme = 1
	SignatureScheme_Eip712                 SignatureScheme = 2
)

var SignatureScheme_name = map[int32]string{
	0: "DefaultSignatureScheme",
	1: "Ed25519",
	2: "Eip712",
}

var SignatureScheme_value = map[string]int32{
	"DefaultSignatureScheme": 0,
	"Ed25519":                1,
	"Eip712":                 2,
}

func (x SignatureScheme) String() string {
	return proto.EnumName(SignatureScheme_name, int32(x))
}

func (SignatureScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

type HashScheme int32

const (
	HashScheme_DefaultHashScheme HashScheme = 0
	HashScheme_Blake3            HashScheme = 1
)

var HashScheme_name = map[int32]string{
	0: "DefaultHashScheme",
	1: "Blake3",
}

var HashScheme_value = map[string]int32{
	"DefaultHashScheme": 0,
	"Blake3":            1,
}

func (x HashScheme) String() string {
	return proto.EnumName(HashScheme_name, int32(x))
}

func (HashScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}

type FarcasterNetwork int32

const (
	FarcasterNetwork_DefaultFarcasterNetwork FarcasterNetwork = 0
	FarcasterNetwork_Mainnet                 FarcasterNetwork = 1
	FarcasterNetwork_Testnet                 FarcasterNetwork = 2
	FarcasterNetwork_Devnet                  FarcasterNetwork = 3
)

var FarcasterNetwork_name = map[int32]string{
	0: "DefaultFarcasterNetwork",
	1: "Mainnet",
	2: "Testnet",
	3: "Devnet",
}

var FarcasterNetwork_value = map[string]int32{
	"DefaultFarcasterNetwork": 0,
	"Mainnet":                 1,
	"Testnet":                 2,
	"Devnet":                  3,
}

func (x FarcasterNetwork) String() string {
	return proto.EnumName(FarcasterNetwork_name, int32(x))
}

func (FarcasterNetwork) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3}
}

type CastId struct {
	Fid    []byte `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	TsHash []byte `protobuf:"bytes,2,opt,name=ts_hash,json=tsHash,proto3" json:"ts_hash,omitempty"`
}

func (m *CastId) Reset()         { *m = CastId{} }
func (m *CastId) String() string { return proto.CompactTextString(m) }
func (*CastId) ProtoMessage()    {}
func (*CastId) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}
func (m *CastId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CastId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CastId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CastId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CastId.Merge(m, src)
}
func (m *CastId) XXX_Size() int {
	return m.Size()
}
func (m *CastId) XXX_DiscardUnknown() {
	xxx_messageInfo_CastId.DiscardUnknown(m)
}

var xxx_messageInfo_CastId proto.InternalMessageInfo

func (m *CastId) GetFid() []byte {
	if m != nil {
		return m.Fid
	}
	return nil
}

func (m *CastId) GetTsHash() []byte {
	if m != nil {
		return m.TsHash
	}
	return nil
}

type UserId struct {
	Fid []byte `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (m *UserId) Reset()         { *m = UserId{} }
func (m *UserId) String() string { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()    {}
func (*UserId) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}
func (m *UserId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserId.Merge(m, src)
}
func (m *UserId) XXX_Size() int {
	return m.Size()
}
func (m *UserId) XXX_DiscardUnknown() {
	xxx_messageInfo_UserId.DiscardUnknown(m)
}

var xxx_messageInfo_UserId proto.InternalMessageInfo

func (m *UserId) GetFid() []byte {
	if m != nil {
		return m.Fid
	}
	return nil
}

type CastAddBody struct {
	Embeds   []string  `protobuf:"bytes,1,rep,name=embeds,proto3" json:"embeds,omitempty"`
	Mentions []*UserId `protobuf:"bytes,2,rep,name=mentions,proto3" json:"mentions,omitempty"`
	// Types that are valid to be assigned to Parent:
	//
	//	*CastAddBody_CastId
	Parent isCastAddBody_Parent `protobuf_oneof:"parent"`
	Text   string               `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *CastAddBody) Reset()         { *m = CastAddBody{} }
func (m *CastAddBody) String() string { return proto.CompactTextString(m) }
func (*CastAddBody) ProtoMessage()    {}
func (*CastAddBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}
func (m *CastAddBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CastAddBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CastAddBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CastAddBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CastAddBody.Merge(m, src)
}
func (m *CastAddBody) XXX_Size() int {
	return m.Size()
}
func (m *CastAddBody) XXX_DiscardUnknown() {
	xxx_messageInfo_CastAddBody.DiscardUnknown(m)
}

var xxx_messageInfo_CastAddBody proto.InternalMessageInfo

type isCastAddBody_Parent interface {
	isCastAddBody_Parent()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CastAddBody_CastId struct {
	CastId *CastId `protobuf:"bytes,3,opt,name=cast_id,json=castId,proto3,oneof" json:"cast_id,omitempty"`
}

func (*CastAddBody_CastId) isCastAddBody_Parent() {}

func (m *CastAddBody) GetParent() isCastAddBody_Parent {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CastAddBody) GetEmbeds() []string {
	if m != nil {
		return m.Embeds
	}
	return nil
}

func (m *CastAddBody) GetMentions() []*UserId {
	if m != nil {
		return m.Mentions
	}
	return nil
}

func (m *CastAddBody) GetCastId() *CastId {
	if x, ok := m.GetParent().(*CastAddBody_CastId); ok {
		return x.CastId
	}
	return nil
}

func (m *CastAddBody) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CastAddBody) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CastAddBody_CastId)(nil),
	}
}

type MessageData struct {
	// Types that are valid to be assigned to Body:
	//
	//	*MessageData_CastAddBody
	Body      isMessageData_Body `protobuf_oneof:"body"`
	Type      MessageType        `protobuf:"varint,2,opt,name=type,proto3,enum=generated.MessageType" json:"type,omitempty"`
	Timestamp uint32             `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Fid       []byte             `protobuf:"bytes,4,opt,name=fid,proto3" json:"fid,omitempty"`
	Network   FarcasterNetwork   `protobuf:"varint,5,opt,name=network,proto3,enum=generated.FarcasterNetwork" json:"network,omitempty"`
}

func (m *MessageData) Reset()         { *m = MessageData{} }
func (m *MessageData) String() string { return proto.CompactTextString(m) }
func (*MessageData) ProtoMessage()    {}
func (*MessageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3}
}
func (m *MessageData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageData.Merge(m, src)
}
func (m *MessageData) XXX_Size() int {
	return m.Size()
}
func (m *MessageData) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageData.DiscardUnknown(m)
}

var xxx_messageInfo_MessageData proto.InternalMessageInfo

type isMessageData_Body interface {
	isMessageData_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MessageData_CastAddBody struct {
	CastAddBody *CastAddBody `protobuf:"bytes,1,opt,name=cast_add_body,json=castAddBody,proto3,oneof" json:"cast_add_body,omitempty"`
}

func (*MessageData_CastAddBody) isMessageData_Body() {}

func (m *MessageData) GetBody() isMessageData_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *MessageData) GetCastAddBody() *CastAddBody {
	if x, ok := m.GetBody().(*MessageData_CastAddBody); ok {
		return x.CastAddBody
	}
	return nil
}

func (m *MessageData) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_DefaultMessageType
}

func (m *MessageData) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MessageData) GetFid() []byte {
	if m != nil {
		return m.Fid
	}
	return nil
}

func (m *MessageData) GetNetwork() FarcasterNetwork {
	if m != nil {
		return m.Network
	}
	return FarcasterNetwork_DefaultFarcasterNetwork
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MessageData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MessageData_CastAddBody)(nil),
	}
}

type Message struct {
	Data            []byte          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Hash            []byte          `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	HashScheme      HashScheme      `protobuf:"varint,3,opt,name=hash_scheme,json=hashScheme,proto3,enum=generated.HashScheme" json:"hash_scheme,omitempty"`
	Signature       []byte          `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	SignatureScheme SignatureScheme `protobuf:"varint,5,opt,name=signature_scheme,json=signatureScheme,proto3,enum=generated.SignatureScheme" json:"signature_scheme,omitempty"`
	Signer          []byte          `protobuf:"bytes,6,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{4}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Message) GetHashScheme() HashScheme {
	if m != nil {
		return m.HashScheme
	}
	return HashScheme_DefaultHashScheme
}

func (m *Message) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Message) GetSignatureScheme() SignatureScheme {
	if m != nil {
		return m.SignatureScheme
	}
	return SignatureScheme_DefaultSignatureScheme
}

func (m *Message) GetSigner() []byte {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterEnum("generated.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("generated.SignatureScheme", SignatureScheme_name, SignatureScheme_value)
	proto.RegisterEnum("generated.HashScheme", HashScheme_name, HashScheme_value)
	proto.RegisterEnum("generated.FarcasterNetwork", FarcasterNetwork_name, FarcasterNetwork_value)
	proto.RegisterType((*CastId)(nil), "generated.CastId")
	proto.RegisterType((*UserId)(nil), "generated.UserId")
	proto.RegisterType((*CastAddBody)(nil), "generated.CastAddBody")
	proto.RegisterType((*MessageData)(nil), "generated.MessageData")
	proto.RegisterType((*Message)(nil), "generated.Message")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0x8e, 0x93, 0xe0, 0x90, 0x31, 0x09, 0x66, 0x25, 0x82, 0x0b, 0x34, 0x8a, 0x72, 0x8a, 0xa2,
	0x16, 0x44, 0x10, 0x54, 0x55, 0x7b, 0x49, 0x4a, 0x10, 0x3d, 0xd0, 0x83, 0x81, 0x1e, 0x7a, 0x89,
	0x36, 0xd9, 0x09, 0xb1, 0xc0, 0x8e, 0xe5, 0x5d, 0x68, 0xf3, 0x16, 0x7d, 0x84, 0x3e, 0x4e, 0x8f,
	0x1c, 0x7b, 0xac, 0x40, 0xea, 0xa5, 0x2f, 0x51, 0xcd, 0x7a, 0xf3, 0x43, 0xd4, 0x53, 0xe6, 0xe7,
	0x9b, 0x6f, 0xe7, 0x9b, 0x99, 0x18, 0x4a, 0x21, 0x4a, 0xc9, 0xaf, 0x71, 0x2f, 0x4e, 0xc6, 0x6a,
	0xcc, 0x8a, 0xd7, 0x18, 0x61, 0xc2, 0x15, 0x8a, 0xfa, 0x21, 0xd8, 0x1f, 0xb8, 0x54, 0x1f, 0x05,
	0x73, 0x21, 0x37, 0x0c, 0x84, 0x67, 0xd5, 0xac, 0xc6, 0x9a, 0x4f, 0x26, 0xdb, 0x82, 0x82, 0x92,
	0xbd, 0x11, 0x97, 0x23, 0x2f, 0xab, 0xa3, 0xb6, 0x92, 0x67, 0x5c, 0x8e, 0xea, 0xdb, 0x60, 0x5f,
	0x49, 0x4c, 0xfe, 0x57, 0x54, 0xff, 0x61, 0x81, 0x43, 0x8c, 0x6d, 0x21, 0x3a, 0x63, 0x31, 0x61,
	0x15, 0xb0, 0x31, 0xec, 0xa3, 0x90, 0x9e, 0x55, 0xcb, 0x35, 0x8a, 0xbe, 0xf1, 0xd8, 0x6b, 0x58,
	0x0d, 0x31, 0x52, 0xc1, 0x38, 0x92, 0x5e, 0xb6, 0x96, 0x6b, 0x38, 0xad, 0x8d, 0xbd, 0x59, 0x5b,
	0x7b, 0x29, 0xbd, 0x3f, 0x83, 0xb0, 0x57, 0x50, 0x18, 0x70, 0xa9, 0x7a, 0x81, 0xf0, 0x72, 0x35,
	0x6b, 0x09, 0x9d, 0x2a, 0x38, 0xcb, 0xf8, 0xf6, 0x20, 0xd5, 0xc2, 0x20, 0xaf, 0xf0, 0x9b, 0xf2,
	0xf2, 0x35, 0xab, 0x51, 0xf4, 0xb5, 0xdd, 0x59, 0x05, 0x3b, 0xe6, 0x09, 0x46, 0xaa, 0xfe, 0xc7,
	0x02, 0xe7, 0x3c, 0x1d, 0xc8, 0x09, 0x57, 0x9c, 0xbd, 0x87, 0x92, 0xe6, 0xe6, 0x42, 0xf4, 0xfa,
	0x63, 0x31, 0xd1, 0x72, 0x9c, 0x56, 0x65, 0xe9, 0x05, 0xa3, 0xe8, 0x2c, 0xe3, 0x3b, 0x83, 0x05,
	0x81, 0x4d, 0xc8, 0xab, 0x49, 0x8c, 0x7a, 0x44, 0xe5, 0x67, 0x45, 0xe6, 0x8d, 0xcb, 0x49, 0x8c,
	0xbe, 0xc6, 0xb0, 0x5d, 0x28, 0xaa, 0x20, 0x44, 0xa9, 0x78, 0x18, 0x6b, 0x1d, 0x25, 0x7f, 0x1e,
	0x98, 0x0e, 0x33, 0x3f, 0xdf, 0xc0, 0x11, 0x14, 0x22, 0x54, 0x5f, 0xc7, 0xc9, 0x8d, 0xb7, 0xa2,
	0xe9, 0x77, 0x16, 0xe8, 0x4f, 0x79, 0x42, 0x7d, 0x60, 0xf2, 0x29, 0x85, 0xf8, 0x53, 0x6c, 0xc7,
	0x86, 0x3c, 0xe9, 0x20, 0xa1, 0x05, 0xd3, 0x04, 0x8d, 0x44, 0x70, 0xc5, 0xcd, 0xaa, 0xb4, 0x4d,
	0xb1, 0x85, 0xed, 0x6a, 0x9b, 0x1d, 0x83, 0x43, 0xbf, 0x3d, 0x39, 0x18, 0x61, 0x88, 0xba, 0xc9,
	0x72, 0x6b, 0x73, 0xe1, 0x59, 0xba, 0x80, 0x0b, 0x9d, 0xf4, 0x61, 0x34, 0xb3, 0x49, 0x9a, 0x0c,
	0xae, 0x23, 0xae, 0xee, 0x12, 0x34, 0x12, 0xe6, 0x01, 0xd6, 0x05, 0x77, 0xe6, 0x4c, 0xa9, 0x53,
	0x45, 0xdb, 0x0b, 0xd4, 0x17, 0x53, 0x88, 0xe1, 0x5f, 0x97, 0xcf, 0x03, 0x74, 0x4c, 0x14, 0xc2,
	0xc4, 0xb3, 0xd3, 0x83, 0x4c, 0xbd, 0xe6, 0xdf, 0xf9, 0x46, 0x69, 0xda, 0xac, 0x02, 0xec, 0x04,
	0x87, 0xfc, 0xee, 0x56, 0x2d, 0x44, 0xdd, 0x0c, 0x73, 0xa0, 0x60, 0x36, 0xe9, 0x5a, 0xac, 0x0c,
	0x40, 0x8e, 0x8f, 0xe1, 0xf8, 0x1e, 0xdd, 0x2c, 0x5b, 0x07, 0xc7, 0x47, 0x3e, 0xa0, 0x7b, 0x23,
	0x40, 0x8e, 0x31, 0x28, 0x4f, 0x03, 0x06, 0x94, 0x67, 0x00, 0x76, 0x3b, 0x8c, 0x29, 0xbf, 0xc2,
	0x4a, 0x50, 0x6c, 0x87, 0xb1, 0x49, 0xd9, 0xec, 0x25, 0xbc, 0xf8, 0x8c, 0x49, 0x30, 0x0c, 0x06,
	0xdc, 0x70, 0x74, 0xd5, 0xa8, 0x2d, 0x44, 0x82, 0x52, 0xba, 0x05, 0xea, 0x69, 0x31, 0x6d, 0xca,
	0x56, 0x89, 0xe5, 0x42, 0xab, 0x20, 0xd2, 0x22, 0x73, 0x61, 0x2d, 0x75, 0x0d, 0x00, 0xa8, 0x2f,
	0xfa, 0x3b, 0xd0, 0xa9, 0x12, 0xc4, 0x69, 0x9e, 0xc2, 0xfa, 0xd2, 0xa4, 0xd8, 0x36, 0x54, 0x8c,
	0xe0, 0xa5, 0x4c, 0x2a, 0xba, 0x2b, 0x5a, 0x47, 0x47, 0x07, 0x6f, 0x5d, 0x8b, 0xfa, 0xef, 0x06,
	0xf1, 0x9b, 0x83, 0x96, 0x9b, 0x6d, 0xee, 0x03, 0xcc, 0x97, 0xc9, 0x36, 0x61, 0xc3, 0x50, 0xcc,
	0x83, 0x6e, 0x86, 0x0a, 0x3a, 0xb7, 0xfc, 0x06, 0x0f, 0x5d, 0xab, 0x79, 0x05, 0xee, 0xf2, 0xd1,
	0xb1, 0x1d, 0xd8, 0x32, 0x65, 0xcb, 0xa9, 0xf4, 0xe9, 0x73, 0x1e, 0x44, 0x11, 0x2a, 0xd7, 0x22,
	0xe7, 0x12, 0xa5, 0x22, 0x27, 0x4b, 0xb4, 0x27, 0x78, 0x4f, 0x76, 0xae, 0x73, 0xfc, 0xf3, 0xb1,
	0x6a, 0x3d, 0x3c, 0x56, 0xad, 0xdf, 0x8f, 0x55, 0xeb, 0xfb, 0x53, 0x35, 0xf3, 0xf0, 0x54, 0xcd,
	0xfc, 0x7a, 0xaa, 0x66, 0xbe, 0xec, 0xea, 0xef, 0x55, 0xff, 0x6e, 0xb8, 0x3f, 0x3b, 0x92, 0x77,
	0x33, 0xab, 0x6f, 0xeb, 0xec, 0xe1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x76, 0x77, 0x84, 0xc1,
	0xde, 0x04, 0x00, 0x00,
}

func (m *CastId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CastId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CastId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TsHash) > 0 {
		i -= len(m.TsHash)
		copy(dAtA[i:], m.TsHash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TsHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fid) > 0 {
		i -= len(m.Fid)
		copy(dAtA[i:], m.Fid)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Fid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fid) > 0 {
		i -= len(m.Fid)
		copy(dAtA[i:], m.Fid)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Fid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CastAddBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CastAddBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CastAddBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x22
	}
	if m.Parent != nil {
		{
			size := m.Parent.Size()
			i -= size
			if _, err := m.Parent.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Mentions) > 0 {
		for iNdEx := len(m.Mentions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mentions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Embeds) > 0 {
		for iNdEx := len(m.Embeds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Embeds[iNdEx])
			copy(dAtA[i:], m.Embeds[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.Embeds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CastAddBody_CastId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CastAddBody_CastId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CastId != nil {
		{
			size, err := m.CastId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MessageData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Network != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Network))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Fid) > 0 {
		i -= len(m.Fid)
		copy(dAtA[i:], m.Fid)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Fid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Timestamp != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessageData_CastAddBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageData_CastAddBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CastAddBody != nil {
		{
			size, err := m.CastAddBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x32
	}
	if m.SignatureScheme != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SignatureScheme))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.HashScheme != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HashScheme))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CastId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fid)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TsHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *UserId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fid)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CastAddBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Embeds) > 0 {
		for _, s := range m.Embeds {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.Mentions) > 0 {
		for _, e := range m.Mentions {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.Parent != nil {
		n += m.Parent.Size()
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CastAddBody_CastId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CastId != nil {
		l = m.CastId.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *MessageData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.Timestamp != 0 {
		n += 1 + sovMessage(uint64(m.Timestamp))
	}
	l = len(m.Fid)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Network != 0 {
		n += 1 + sovMessage(uint64(m.Network))
	}
	return n
}

func (m *MessageData_CastAddBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CastAddBody != nil {
		l = m.CastAddBody.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.HashScheme != 0 {
		n += 1 + sovMessage(uint64(m.HashScheme))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SignatureScheme != 0 {
		n += 1 + sovMessage(uint64(m.SignatureScheme))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CastId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CastId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CastId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fid = append(m.Fid[:0], dAtA[iNdEx:postIndex]...)
			if m.Fid == nil {
				m.Fid = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TsHash = append(m.TsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TsHash == nil {
				m.TsHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fid = append(m.Fid[:0], dAtA[iNdEx:postIndex]...)
			if m.Fid == nil {
				m.Fid = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CastAddBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CastAddBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CastAddBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embeds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Embeds = append(m.Embeds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mentions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mentions = append(m.Mentions, &UserId{})
			if err := m.Mentions[len(m.Mentions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CastId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Parent = &CastAddBody_CastId{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastAddBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CastAddBody{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageData_CastAddBody{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fid = append(m.Fid[:0], dAtA[iNdEx:postIndex]...)
			if m.Fid == nil {
				m.Fid = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= FarcasterNetwork(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashScheme", wireType)
			}
			m.HashScheme = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashScheme |= HashScheme(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureScheme", wireType)
			}
			m.SignatureScheme = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignatureScheme |= SignatureScheme(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
