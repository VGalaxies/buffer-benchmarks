// Code generated by capnpc-go. DO NOT EDIT.

package generated

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type MessageType uint16

// MessageType_TypeID is the unique identifier for the type MessageType.
const MessageType_TypeID = 0xd77532e6ca2bdadc

// Values of MessageType.
const (
	MessageType_defaultMessageType        MessageType = 0
	MessageType_castAdd                   MessageType = 1
	MessageType_castRemove                MessageType = 2
	MessageType_reactionAdd               MessageType = 3
	MessageType_reactionRemove            MessageType = 4
	MessageType_ampAdd                    MessageType = 5
	MessageType_ampRemove                 MessageType = 6
	MessageType_verificationAddEthAddress MessageType = 7
	MessageType_verificationRemove        MessageType = 8
	MessageType_signerAdd                 MessageType = 9
	MessageType_signerRemove              MessageType = 10
	MessageType_userDataAdd               MessageType = 11
)

// String returns the enum's constant name.
func (c MessageType) String() string {
	switch c {
	case MessageType_defaultMessageType:
		return "defaultMessageType"
	case MessageType_castAdd:
		return "castAdd"
	case MessageType_castRemove:
		return "castRemove"
	case MessageType_reactionAdd:
		return "reactionAdd"
	case MessageType_reactionRemove:
		return "reactionRemove"
	case MessageType_ampAdd:
		return "ampAdd"
	case MessageType_ampRemove:
		return "ampRemove"
	case MessageType_verificationAddEthAddress:
		return "verificationAddEthAddress"
	case MessageType_verificationRemove:
		return "verificationRemove"
	case MessageType_signerAdd:
		return "signerAdd"
	case MessageType_signerRemove:
		return "signerRemove"
	case MessageType_userDataAdd:
		return "userDataAdd"

	default:
		return ""
	}
}

// MessageTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageTypeFromString(c string) MessageType {
	switch c {
	case "defaultMessageType":
		return MessageType_defaultMessageType
	case "castAdd":
		return MessageType_castAdd
	case "castRemove":
		return MessageType_castRemove
	case "reactionAdd":
		return MessageType_reactionAdd
	case "reactionRemove":
		return MessageType_reactionRemove
	case "ampAdd":
		return MessageType_ampAdd
	case "ampRemove":
		return MessageType_ampRemove
	case "verificationAddEthAddress":
		return MessageType_verificationAddEthAddress
	case "verificationRemove":
		return MessageType_verificationRemove
	case "signerAdd":
		return MessageType_signerAdd
	case "signerRemove":
		return MessageType_signerRemove
	case "userDataAdd":
		return MessageType_userDataAdd

	default:
		return 0
	}
}

type MessageType_List = capnp.EnumList[MessageType]

func NewMessageType_List(s *capnp.Segment, sz int32) (MessageType_List, error) {
	return capnp.NewEnumList[MessageType](s, sz)
}

type SignatureScheme uint16

// SignatureScheme_TypeID is the unique identifier for the type SignatureScheme.
const SignatureScheme_TypeID = 0x861e1b1fbfb6c659

// Values of SignatureScheme.
const (
	SignatureScheme_defaultSignatureScheme SignatureScheme = 0
	SignatureScheme_ed25519                SignatureScheme = 1
	SignatureScheme_eip712                 SignatureScheme = 2
)

// String returns the enum's constant name.
func (c SignatureScheme) String() string {
	switch c {
	case SignatureScheme_defaultSignatureScheme:
		return "defaultSignatureScheme"
	case SignatureScheme_ed25519:
		return "ed25519"
	case SignatureScheme_eip712:
		return "eip712"

	default:
		return ""
	}
}

// SignatureSchemeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SignatureSchemeFromString(c string) SignatureScheme {
	switch c {
	case "defaultSignatureScheme":
		return SignatureScheme_defaultSignatureScheme
	case "ed25519":
		return SignatureScheme_ed25519
	case "eip712":
		return SignatureScheme_eip712

	default:
		return 0
	}
}

type SignatureScheme_List = capnp.EnumList[SignatureScheme]

func NewSignatureScheme_List(s *capnp.Segment, sz int32) (SignatureScheme_List, error) {
	return capnp.NewEnumList[SignatureScheme](s, sz)
}

type HashScheme uint16

// HashScheme_TypeID is the unique identifier for the type HashScheme.
const HashScheme_TypeID = 0xbbdfe350b6d91d4c

// Values of HashScheme.
const (
	HashScheme_defaultHashScheme HashScheme = 0
	HashScheme_blake3            HashScheme = 1
)

// String returns the enum's constant name.
func (c HashScheme) String() string {
	switch c {
	case HashScheme_defaultHashScheme:
		return "defaultHashScheme"
	case HashScheme_blake3:
		return "blake3"

	default:
		return ""
	}
}

// HashSchemeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func HashSchemeFromString(c string) HashScheme {
	switch c {
	case "defaultHashScheme":
		return HashScheme_defaultHashScheme
	case "blake3":
		return HashScheme_blake3

	default:
		return 0
	}
}

type HashScheme_List = capnp.EnumList[HashScheme]

func NewHashScheme_List(s *capnp.Segment, sz int32) (HashScheme_List, error) {
	return capnp.NewEnumList[HashScheme](s, sz)
}

type FarcasterNetwork uint16

// FarcasterNetwork_TypeID is the unique identifier for the type FarcasterNetwork.
const FarcasterNetwork_TypeID = 0x8f9a86bfc9409372

// Values of FarcasterNetwork.
const (
	FarcasterNetwork_defaultFarcasterNetwork FarcasterNetwork = 0
	FarcasterNetwork_mainnet                 FarcasterNetwork = 1
	FarcasterNetwork_testnet                 FarcasterNetwork = 2
	FarcasterNetwork_devnet                  FarcasterNetwork = 3
)

// String returns the enum's constant name.
func (c FarcasterNetwork) String() string {
	switch c {
	case FarcasterNetwork_defaultFarcasterNetwork:
		return "defaultFarcasterNetwork"
	case FarcasterNetwork_mainnet:
		return "mainnet"
	case FarcasterNetwork_testnet:
		return "testnet"
	case FarcasterNetwork_devnet:
		return "devnet"

	default:
		return ""
	}
}

// FarcasterNetworkFromString returns the enum value with a name,
// or the zero value if there's no such value.
func FarcasterNetworkFromString(c string) FarcasterNetwork {
	switch c {
	case "defaultFarcasterNetwork":
		return FarcasterNetwork_defaultFarcasterNetwork
	case "mainnet":
		return FarcasterNetwork_mainnet
	case "testnet":
		return FarcasterNetwork_testnet
	case "devnet":
		return FarcasterNetwork_devnet

	default:
		return 0
	}
}

type FarcasterNetwork_List = capnp.EnumList[FarcasterNetwork]

func NewFarcasterNetwork_List(s *capnp.Segment, sz int32) (FarcasterNetwork_List, error) {
	return capnp.NewEnumList[FarcasterNetwork](s, sz)
}

type CastId capnp.Struct

// CastId_TypeID is the unique identifier for the type CastId.
const CastId_TypeID = 0x8bfee221f43130d4

func NewCastId(s *capnp.Segment) (CastId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CastId(st), err
}

func NewRootCastId(s *capnp.Segment) (CastId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CastId(st), err
}

func ReadRootCastId(msg *capnp.Message) (CastId, error) {
	root, err := msg.Root()
	return CastId(root.Struct()), err
}

func (s CastId) String() string {
	str, _ := text.Marshal(0x8bfee221f43130d4, capnp.Struct(s))
	return str
}

func (s CastId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CastId) DecodeFromPtr(p capnp.Ptr) CastId {
	return CastId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CastId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CastId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CastId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CastId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CastId) Fid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s CastId) HasFid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CastId) SetFid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s CastId) TsHash() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s CastId) HasTsHash() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CastId) SetTsHash(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// CastId_List is a list of CastId.
type CastId_List = capnp.StructList[CastId]

// NewCastId creates a new list of CastId.
func NewCastId_List(s *capnp.Segment, sz int32) (CastId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CastId](l), err
}

// CastId_Future is a wrapper for a CastId promised by a client call.
type CastId_Future struct{ *capnp.Future }

func (f CastId_Future) Struct() (CastId, error) {
	p, err := f.Future.Ptr()
	return CastId(p.Struct()), err
}

type UserId capnp.Struct

// UserId_TypeID is the unique identifier for the type UserId.
const UserId_TypeID = 0xebeec13fdcbd8457

func NewUserId(s *capnp.Segment) (UserId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserId(st), err
}

func NewRootUserId(s *capnp.Segment) (UserId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserId(st), err
}

func ReadRootUserId(msg *capnp.Message) (UserId, error) {
	root, err := msg.Root()
	return UserId(root.Struct()), err
}

func (s UserId) String() string {
	str, _ := text.Marshal(0xebeec13fdcbd8457, capnp.Struct(s))
	return str
}

func (s UserId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserId) DecodeFromPtr(p capnp.Ptr) UserId {
	return UserId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserId) Fid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s UserId) HasFid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserId) SetFid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// UserId_List is a list of UserId.
type UserId_List = capnp.StructList[UserId]

// NewUserId creates a new list of UserId.
func NewUserId_List(s *capnp.Segment, sz int32) (UserId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserId](l), err
}

// UserId_Future is a wrapper for a UserId promised by a client call.
type UserId_Future struct{ *capnp.Future }

func (f UserId_Future) Struct() (UserId, error) {
	p, err := f.Future.Ptr()
	return UserId(p.Struct()), err
}

type CastAddBody capnp.Struct
type CastAddBody_parent CastAddBody
type CastAddBody_parent_Which uint16

const (
	CastAddBody_parent_Which_void   CastAddBody_parent_Which = 0
	CastAddBody_parent_Which_castId CastAddBody_parent_Which = 1
)

func (w CastAddBody_parent_Which) String() string {
	const s = "voidcastId"
	switch w {
	case CastAddBody_parent_Which_void:
		return s[0:4]
	case CastAddBody_parent_Which_castId:
		return s[4:10]

	}
	return "CastAddBody_parent_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CastAddBody_TypeID is the unique identifier for the type CastAddBody.
const CastAddBody_TypeID = 0xb15eddf8160bd4e9

func NewCastAddBody(s *capnp.Segment) (CastAddBody, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return CastAddBody(st), err
}

func NewRootCastAddBody(s *capnp.Segment) (CastAddBody, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return CastAddBody(st), err
}

func ReadRootCastAddBody(msg *capnp.Message) (CastAddBody, error) {
	root, err := msg.Root()
	return CastAddBody(root.Struct()), err
}

func (s CastAddBody) String() string {
	str, _ := text.Marshal(0xb15eddf8160bd4e9, capnp.Struct(s))
	return str
}

func (s CastAddBody) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CastAddBody) DecodeFromPtr(p capnp.Ptr) CastAddBody {
	return CastAddBody(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CastAddBody) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CastAddBody) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CastAddBody) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CastAddBody) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CastAddBody) Embeds() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s CastAddBody) HasEmbeds() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CastAddBody) SetEmbeds(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEmbeds sets the embeds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CastAddBody) NewEmbeds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CastAddBody) Mentions() (UserId_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return UserId_List(p.List()), err
}

func (s CastAddBody) HasMentions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CastAddBody) SetMentions(v UserId_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMentions sets the mentions field to a newly
// allocated UserId_List, preferring placement in s's segment.
func (s CastAddBody) NewMentions(n int32) (UserId_List, error) {
	l, err := NewUserId_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return UserId_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CastAddBody) Parent() CastAddBody_parent { return CastAddBody_parent(s) }

func (s CastAddBody_parent) Which() CastAddBody_parent_Which {
	return CastAddBody_parent_Which(capnp.Struct(s).Uint16(0))
}
func (s CastAddBody_parent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CastAddBody_parent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CastAddBody_parent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CastAddBody_parent) SetVoid() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s CastAddBody_parent) CastId() (CastId, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != castId")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return CastId(p.Struct()), err
}

func (s CastAddBody_parent) HasCastId() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s CastAddBody_parent) SetCastId(v CastId) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewCastId sets the castId field to a newly
// allocated CastId struct, preferring placement in s's segment.
func (s CastAddBody_parent) NewCastId() (CastId, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewCastId(capnp.Struct(s).Segment())
	if err != nil {
		return CastId{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CastAddBody) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s CastAddBody) HasText() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CastAddBody) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s CastAddBody) SetText(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// CastAddBody_List is a list of CastAddBody.
type CastAddBody_List = capnp.StructList[CastAddBody]

// NewCastAddBody creates a new list of CastAddBody.
func NewCastAddBody_List(s *capnp.Segment, sz int32) (CastAddBody_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[CastAddBody](l), err
}

// CastAddBody_Future is a wrapper for a CastAddBody promised by a client call.
type CastAddBody_Future struct{ *capnp.Future }

func (f CastAddBody_Future) Struct() (CastAddBody, error) {
	p, err := f.Future.Ptr()
	return CastAddBody(p.Struct()), err
}
func (p CastAddBody_Future) Parent() CastAddBody_parent_Future {
	return CastAddBody_parent_Future{p.Future}
}

// CastAddBody_parent_Future is a wrapper for a CastAddBody_parent promised by a client call.
type CastAddBody_parent_Future struct{ *capnp.Future }

func (f CastAddBody_parent_Future) Struct() (CastAddBody_parent, error) {
	p, err := f.Future.Ptr()
	return CastAddBody_parent(p.Struct()), err
}
func (p CastAddBody_parent_Future) CastId() CastId_Future {
	return CastId_Future{Future: p.Future.Field(2, nil)}
}

type MessageData capnp.Struct
type MessageData_body MessageData
type MessageData_body_Which uint16

const (
	MessageData_body_Which_void        MessageData_body_Which = 0
	MessageData_body_Which_castAddBody MessageData_body_Which = 1
)

func (w MessageData_body_Which) String() string {
	const s = "voidcastAddBody"
	switch w {
	case MessageData_body_Which_void:
		return s[0:4]
	case MessageData_body_Which_castAddBody:
		return s[4:15]

	}
	return "MessageData_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageData_TypeID is the unique identifier for the type MessageData.
const MessageData_TypeID = 0xa255d8ff00bcfbc0

func NewMessageData(s *capnp.Segment) (MessageData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return MessageData(st), err
}

func NewRootMessageData(s *capnp.Segment) (MessageData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return MessageData(st), err
}

func ReadRootMessageData(msg *capnp.Message) (MessageData, error) {
	root, err := msg.Root()
	return MessageData(root.Struct()), err
}

func (s MessageData) String() string {
	str, _ := text.Marshal(0xa255d8ff00bcfbc0, capnp.Struct(s))
	return str
}

func (s MessageData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageData) DecodeFromPtr(p capnp.Ptr) MessageData {
	return MessageData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageData) Body() MessageData_body { return MessageData_body(s) }

func (s MessageData_body) Which() MessageData_body_Which {
	return MessageData_body_Which(capnp.Struct(s).Uint16(0))
}
func (s MessageData_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageData_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageData_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageData_body) SetVoid() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s MessageData_body) CastAddBody() (CastAddBody, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != castAddBody")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CastAddBody(p.Struct()), err
}

func (s MessageData_body) HasCastAddBody() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageData_body) SetCastAddBody(v CastAddBody) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCastAddBody sets the castAddBody field to a newly
// allocated CastAddBody struct, preferring placement in s's segment.
func (s MessageData_body) NewCastAddBody() (CastAddBody, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewCastAddBody(capnp.Struct(s).Segment())
	if err != nil {
		return CastAddBody{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageData) Type() MessageType {
	return MessageType(capnp.Struct(s).Uint16(2))
}

func (s MessageData) SetType(v MessageType) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s MessageData) Timestamp() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s MessageData) SetTimestamp(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s MessageData) Fid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s MessageData) HasFid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MessageData) SetFid(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s MessageData) Network() FarcasterNetwork {
	return FarcasterNetwork(capnp.Struct(s).Uint16(8))
}

func (s MessageData) SetNetwork(v FarcasterNetwork) {
	capnp.Struct(s).SetUint16(8, uint16(v))
}

// MessageData_List is a list of MessageData.
type MessageData_List = capnp.StructList[MessageData]

// NewMessageData creates a new list of MessageData.
func NewMessageData_List(s *capnp.Segment, sz int32) (MessageData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[MessageData](l), err
}

// MessageData_Future is a wrapper for a MessageData promised by a client call.
type MessageData_Future struct{ *capnp.Future }

func (f MessageData_Future) Struct() (MessageData, error) {
	p, err := f.Future.Ptr()
	return MessageData(p.Struct()), err
}
func (p MessageData_Future) Body() MessageData_body_Future { return MessageData_body_Future{p.Future} }

// MessageData_body_Future is a wrapper for a MessageData_body promised by a client call.
type MessageData_body_Future struct{ *capnp.Future }

func (f MessageData_body_Future) Struct() (MessageData_body, error) {
	p, err := f.Future.Ptr()
	return MessageData_body(p.Struct()), err
}
func (p MessageData_body_Future) CastAddBody() CastAddBody_Future {
	return CastAddBody_Future{Future: p.Future.Field(0, nil)}
}

type Message capnp.Struct

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xb271ceb1b8e0928d

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xb271ceb1b8e0928d, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Message) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Message) Hash() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Message) HasHash() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Message) SetHash(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Message) HashScheme() HashScheme {
	return HashScheme(capnp.Struct(s).Uint16(0))
}

func (s Message) SetHashScheme(v HashScheme) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Message) Signature() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s Message) HasSignature() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Message) SetSignature(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s Message) SignatureScheme() SignatureScheme {
	return SignatureScheme(capnp.Struct(s).Uint16(2))
}

func (s Message) SetSignatureScheme(v SignatureScheme) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s Message) Signer() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s Message) HasSigner() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Message) SetSigner(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}

const schema_e6989e0b6c84e686 = "x\xdatUm\x88\x15U\x18~\x9fs\xe6\xde\xbb\xea" +
	"\xee\xce\x1e\xe6\x16Yl\x8b\x12\x94\x96\xb6\xeb&\xd6R" +
	"\x8c\xbb\x99hdyv[$\x89hv\xe7\xe8\xde\xdc" +
	"\xb9\xf7zg\xee\xae7Z\xc4PA\xc2\x0a\xf3\x87\x1a" +
	"\x85[\x09)\xfdH\x11\xfb2\xb4~\x04\xf9#h1" +
	"\xca0\xfa\"#\xa4~Hb\x1a8qf\xee\x97w" +
	"\xdb_s>\xde\xaf\xe7}\xce\xfbL\xe7\xebl\xb9\xd1" +
	"\xd5ro\x82\x98|0\x91\x0c\x9f\xfa\xe2\xc4\xa9\x8e\xdb" +
	"n\xdfI\xa2\x95\x85;/l\x1f\x9d\xf3\xe6\xbe\x0bD" +
	"\xb0&\xd8%k\x17K\x11Y;\xd8\x13\x84\xf0lg" +
	"\xd7\xdf\xf3~\xb9\xfe\x12\x89V\xd4\x0c\x13\x91\xc5$;" +
	"b\x1d\x8eV\x87\xd88!,\xbc\xb6\xfc\xcbS;\x0f" +
	"\xbc2-(\xf85\xab\x85k\xc3Y|#!\xbc2" +
	"0\xfb\xf4\xcbs'\xf6\x92\xbc\x15\x08\xff8;\xe7\xe6" +
	"\x7f~x\xe6(\x0d\x1a)0\xa2\xee\xa5|6\x08\xd6" +
	"C|\x9cp\xe5\xf4\xbf'\xc3\xef\x06\xdf\x92\xad`\x8d" +
	"\xf9\xf7\xf3)\xeb\x90\x0e\xdb=\xc9;@u\x91d+" +
	"\xea\xab5\"kc\xca:\x14\xad&\x8d\xdf\x09\xe1\xee" +
	"=?}x\xf4\xab\xcd\xc7\xfe\xd7x\"q\xcc\xda\x91" +
	"\xd0\xa1\xb7%\xd6\xe9\xd0\x8f\xb5\x9f;\xb1\xf6\xd7\x1f?" +
	"\x99\x86\xed\\\xf2\x8c\xf5[R\xfb\xfc\x9c\\F\x08\xcf" +
	"\x7f\x7f\xf7\x99\x0bK\x8a\xdfN3\xfc39e]\xd5" +
	"\x86\xdd\x97\x93w\xea\x90\xeb\xb6\x7fz\xde\xfe\xec\xaf\x8b" +
	"\x0d\xad\x85\x8e\xf5u\xea\x88u.\xa5W\xdf\xa4lB" +
	"\xf8\xf6\x07\xa1H\\\xf4/\xe9\x8e\xb1JO\x06Y\xd4" +
	"/\xebr\xea\x1a\xc1\xba\x9a\x1a\xa7E\xa1\xa7|\xdf\xd9" +
	"\xa8\x16\xb3a'\x9f\xcd\xf7\x0cd6f\x9d\xa0XP" +
	"\x03\x1d\xc3#\xcaSk\x01\xd9\xac\x9dD\xfb\xc7D\x80" +
	"h\xef#\x02\x137\xf5\x10\x85\xae\xda\xe0\x14G\x83\x01" +
	"T\x9c\xec\x81\xc8i\xabr\x97,]\xda\xf5\x80\xad2" +
	"\xf9e]K\xaa9\x10\xe7x\xd81\xfd`\xb5\xabC" +
	"7q\x83\xc8\x00\x91X0\x9fH\xde\xc1!;\x19\x04" +
	"\x90\x86>\\\xd4C$\xef\xe2\x90\xf71\xa46d\\" +
	"\xb4\x10C\x0b\xc1\x0e\xfcU\x8e?R\xd96\x82X\xe9" +
	"\x14\x86\x1d?P\x85\xc7m\x15\x8c\xe7\x0a\x9bt\xaa\xb6" +
	"\x08\xc5\x82\xcf#\x14\x0bb\x14\xf3\xf4\x87\x8b\xb9u`" +
	"V\x1aU\xe7\xd8\x97<'\x93\xcd\xaa\x80\x02\xe5\x07\xfa" +
	"k\xbbj,\xab\x82jR^A\xe5\x07\xbd\xae\xdb\x97" +
	"sK\x8b\xf3NAe\x03\"\x8d\xaf9\x0c\xd3q\xea" +
	"\x855\x84\xed\xb8\x1e\xb24x\x03Fs,\x97q)" +
	"i\xeb\x02V\xbbh\xabM\x13\x01m\xd3\x81\xae\x89\xb7" +
	"+\x9c\x00\x8e\xc6\x98\xd6\xedD\x1d\xfbbb!\xb1\xa8" +
	"\x9d\xba\x02\xa5+x\x96C\x8e2\x08\x868\x7f\xa6\x9f" +
	"H\x8ep\xc8\x80Ap\xa4a\x10\x89\xcd\x9a\x8dQ\x0e" +
	"\xb9\x85A\x18F\x1a\x09\"Q\xec#\x92y\x0e\xf9\x02" +
	"\x839\x94sKfP\xca+\x98\xb5'L\x80I\x08" +
	"\x83\x8c\xa7\xfc\xc0\xf1\x08y4\x11C\x13\xdd\xc0\xde\xd6" +
	"l\xdcY\x985\x05({6\xe0\xab\xf5\x14\xa5\x88\xc3" +
	"\xeasqt\xd7\x9e.\x17Xy.\xc5G\x89d\xc0" +
	"!_e\x00C\x9dn\x88\xdd=\xc4\x04\xe71\xba\xe2" +
	"\xc2\x1a\x10[yC\xca\xf5\xd1JX\xcb\x81fbz" +
	"\x19z*\x1bdrY\x9f\x88*Wm\xb5\x01$\xe8" +
	"C;\xa6\xd9\x0c\xd4\x96 rl\xaeC\x80\x0aC\x1d" +
	"\xd1^W\x7fK\xb5\xfa\xfd\xba\x80\xbd\x1c\xf2`]\xf5" +
	"o\xe8\xc3}\x1c\xf2\x1d]}\xcc\xd8\xe4z\"y\x90" +
	"C\xbe\xa7\xc9)\xbf\x98\xc3\x9a\xb1w9\xe4qMN" +
	"\x99\xb1\xa3/\x12\xc9\xf79\xe4I\x06\x91\xe01c\x1f" +
	"\xe9.\x1d\xe7\x90\xa7\x19L\xd7\x09\x9c\x0a\x05\xe6H\xfd" +
	"\xf8\xe8\x8d\x9e\\\xe2\x9e\xa6\xb3*]eR\xfc\xf2x" +
	"\x13T\xd5\xa5r\x06\x15\x8f<\xc1\xac\xfd#b?[" +
	"\xdb\xa8\xc2LC\xba\xaa\x9c\xd4SD\x91\x14D\x80\xc5" +
	"\x9eh>E\xddD\xaeB\xc5\x12\xca\x1e\x1au6\xa9" +
	"\xee\x19\xe6\xe0\xc9R\x1eQ\xa7;\xa3X\xbb\x0eD\xb1" +
	"v\xc5\xb3\xbem}4\xeb\x13CD0D\xe9y\"" +
	"$D\xb1\x87\x08I\xe1\xf5\x13!%2SDh\x12" +
	"\x9e\xf6\x9b\x15\x1f\xce\x16\x99\xe7\x880G\xa8\xa1ZE" +
	"kP\xc9\xc7\xf3j\xebp\xfcHC\xfd\xedW^\x8e" +
	"\xf8\x98\x0a\x0b\xca\x19\xd6\x0f\x88R\xfa\xaa\xba\xb3\xb5\xc1" +
	"\x98\xb2\x1d/\xaf\xcf\x1d/\x1f\x1d\x10T8\xa6\x0a\x99" +
	"\x0d\x99a\x87i\xc3^\xd7}$\x18\xe9u\xdd\x82\xf2" +
	"\xe1W\xef\xa0\xef\xb4\x87N\x11\xb7\xb7\xd7%\xb8\xe5u" +
	"\xbf\"S\x87\x0f\x8b\xbe*\xacp\x02'\xce\xde\xf0$" +
	"\x07}S\x15b\xf95\xaa/\xb2e~\xa4V\x90\xe9" +
	"\x1b\x95vf\xc5\xb1\x9d\xc5Z\x03\xca\x12\x17kx\x9d" +
	"\xc2\xb5\xe0zX\x16\xf1!\"y\x0f\x87\xbc\xbf*p" +
	"a\xb9g}\x94\xca\xb9%\xb4\xd5~\xc4\xb1\xce\xfd\x17" +
	"\x00\x00\xff\xff\x11\xc0V\xdb"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e6989e0b6c84e686,
		Nodes: []uint64{
			0x861e1b1fbfb6c659,
			0x8bfee221f43130d4,
			0x8f9a86bfc9409372,
			0x947d198ec00a53f7,
			0xa255d8ff00bcfbc0,
			0xb15eddf8160bd4e9,
			0xb271ceb1b8e0928d,
			0xbbdfe350b6d91d4c,
			0xd77532e6ca2bdadc,
			0xebeec13fdcbd8457,
			0xf273eb0511ffb7a3,
		},
		Compressed: true,
	})
}
