// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package generated

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CastAddBody struct {
	_tab flatbuffers.Table
}

func GetRootAsCastAddBody(buf []byte, offset flatbuffers.UOffsetT) *CastAddBody {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CastAddBody{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCastAddBody(buf []byte, offset flatbuffers.UOffsetT) *CastAddBody {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CastAddBody{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CastAddBody) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CastAddBody) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CastAddBody) Embeds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CastAddBody) EmbedsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CastAddBody) Mentions(obj *UserId, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *CastAddBody) MentionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CastAddBody) ParentType() TargetId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return TargetId(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CastAddBody) MutateParentType(n TargetId) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *CastAddBody) Parent(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *CastAddBody) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CastAddBodyStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CastAddBodyAddEmbeds(builder *flatbuffers.Builder, embeds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(embeds), 0)
}
func CastAddBodyStartEmbedsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CastAddBodyAddMentions(builder *flatbuffers.Builder, mentions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(mentions), 0)
}
func CastAddBodyStartMentionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CastAddBodyAddParentType(builder *flatbuffers.Builder, parentType TargetId) {
	builder.PrependByteSlot(2, byte(parentType), 0)
}
func CastAddBodyAddParent(builder *flatbuffers.Builder, parent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(parent), 0)
}
func CastAddBodyAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(text), 0)
}
func CastAddBodyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
