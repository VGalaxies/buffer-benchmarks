// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package generated

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageData struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageData(buf []byte, offset flatbuffers.UOffsetT) *MessageData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMessageData(buf []byte, offset flatbuffers.UOffsetT) *MessageData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MessageData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageData) BodyType() MessageBody {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return MessageBody(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MessageData) MutateBodyType(n MessageBody) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *MessageData) Body(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *MessageData) Type() *MessageType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		v := MessageType(rcv._tab.GetUint16(o + rcv._tab.Pos))
		return &v
	}
	return nil
}

func (rcv *MessageData) MutateType(n MessageType) bool {
	return rcv._tab.MutateUint16Slot(8, uint16(n))
}

func (rcv *MessageData) Timestamp() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageData) MutateTimestamp(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *MessageData) Fid(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *MessageData) FidLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MessageData) FidBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageData) MutateFid(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *MessageData) Network() FarcasterNetwork {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return FarcasterNetwork(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 1
}

func (rcv *MessageData) MutateNetwork(n FarcasterNetwork) bool {
	return rcv._tab.MutateByteSlot(14, byte(n))
}

func MessageDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MessageDataAddBodyType(builder *flatbuffers.Builder, bodyType MessageBody) {
	builder.PrependByteSlot(0, byte(bodyType), 0)
}
func MessageDataAddBody(builder *flatbuffers.Builder, body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(body), 0)
}
func MessageDataAddType(builder *flatbuffers.Builder, type_ MessageType) {
	builder.PrependUint16(uint16(type_))
	builder.Slot(2)
}
func MessageDataAddTimestamp(builder *flatbuffers.Builder, timestamp uint32) {
	builder.PrependUint32Slot(3, timestamp, 0)
}
func MessageDataAddFid(builder *flatbuffers.Builder, fid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(fid), 0)
}
func MessageDataStartFidVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func MessageDataAddNetwork(builder *flatbuffers.Builder, network FarcasterNetwork) {
	builder.PrependByteSlot(5, byte(network), 1)
}
func MessageDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
