// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package generated

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UserDataBody struct {
	_tab flatbuffers.Table
}

func GetRootAsUserDataBody(buf []byte, offset flatbuffers.UOffsetT) *UserDataBody {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UserDataBody{}
	x.Init(buf, n+offset)
	return x
}

func FinishUserDataBodyBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsUserDataBody(buf []byte, offset flatbuffers.UOffsetT) *UserDataBody {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UserDataBody{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedUserDataBodyBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *UserDataBody) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UserDataBody) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UserDataBody) Type() UserDataType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return UserDataType(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 1
}

func (rcv *UserDataBody) MutateType(n UserDataType) bool {
	return rcv._tab.MutateUint16Slot(4, uint16(n))
}

func (rcv *UserDataBody) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func UserDataBodyStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func UserDataBodyAddType(builder *flatbuffers.Builder, type_ UserDataType) {
	builder.PrependUint16Slot(0, uint16(type_), 1)
}
func UserDataBodyAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func UserDataBodyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
