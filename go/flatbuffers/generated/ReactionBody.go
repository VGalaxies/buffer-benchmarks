// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package generated

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ReactionBody struct {
	_tab flatbuffers.Table
}

func GetRootAsReactionBody(buf []byte, offset flatbuffers.UOffsetT) *ReactionBody {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReactionBody{}
	x.Init(buf, n+offset)
	return x
}

func FinishReactionBodyBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsReactionBody(buf []byte, offset flatbuffers.UOffsetT) *ReactionBody {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ReactionBody{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedReactionBodyBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ReactionBody) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReactionBody) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReactionBody) TargetType() TargetId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return TargetId(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ReactionBody) MutateTargetType(n TargetId) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *ReactionBody) Target(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *ReactionBody) Type() ReactionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ReactionType(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 1
}

func (rcv *ReactionBody) MutateType(n ReactionType) bool {
	return rcv._tab.MutateUint16Slot(8, uint16(n))
}

func ReactionBodyStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ReactionBodyAddTargetType(builder *flatbuffers.Builder, targetType TargetId) {
	builder.PrependByteSlot(0, byte(targetType), 0)
}
func ReactionBodyAddTarget(builder *flatbuffers.Builder, target flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(target), 0)
}
func ReactionBodyAddType(builder *flatbuffers.Builder, type_ ReactionType) {
	builder.PrependUint16Slot(2, uint16(type_), 1)
}
func ReactionBodyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
